# Creates a Release
#
# Based on:
# https://github.com/ClementTsang/bottom/blob/master/.github/workflows/deployment.yml

name: Create Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Version:"
        required: true
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "Manual run against a tag; overriding actual tag in the environment..."
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Validate version environment variable
        run: |
          echo "Version being built against is version ${{ env.VERSION }}"!

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }} Release

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: Build Release
    needs: [create-github-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
    
    steps:

    - name: Checkout Code
      uses: actions/checkout@v1

    - name: Setup Rust Toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Get release download URL
      uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: artifacts
    
    - name: Set release upload URL and release version
      shell: bash
      run: |
        release_upload_url="$(cat ./artifacts/release-upload-url)"
        echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
        release_version="$(cat ./artifacts/release-version)"
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

    - name: Validate release environment variables
      run: |
        echo "Release upload url: ${{ env.RELEASE_UPLOAD_URL }}"
        echo "Release version: ${{ env.RELEASE_VERSION }}"

    - name: Install Build Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: "sudo apt -y install xorg-dev libxcb-shape0-dev libxcb-xfixes0-dev"

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --verbose

    - name: Strip release binary (macOS or Linux)
      if: matrix.os != 'windows-latest'
      run: |
        strip target/release/pc

    - name: Bundle release (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cp target/release/pc.exe pc.exe
        7z a pc_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip "pc.exe"
        7z a pc_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip "README.md"
        7z a pc_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip "LICENSE"
        echo "ASSET=pc_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip" >> $GITHUB_ENV

    - name: Bundle release (Linux and macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        cp target/release/pc ./pc
        tar -czvf pc_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.tar.gz pc README.md LICENSE
        echo "ASSET=pc_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.tar.gz" >> $GITHUB_ENV

    - name: Upload main release
      uses: actions/upload-release-asset@v1.0.1
      id: upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

    - name: Build Debian release (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo install cargo-deb --version 1.30.0 --locked
        cargo deb
        cp ./target/debian/pc_*.deb ./pc_${{ env.RELEASE_VERSION }}_amd64.deb

    - name: Upload Debian file (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: pc_${{ env.RELEASE_VERSION }}_amd64.deb
        asset_name: pc_${{ env.RELEASE_VERSION }}_amd64.deb
        asset_content_type: application/octet-stream
