# Creates a Release
#
# Based on:
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

name: Create Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Version:"
        required: true
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:

  create-github-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Show the version
        run: |
          echo "version is: $VERSION"

      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION

    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: Build Release
    needs: [create-github-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
    
    steps:

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Build
      run: |
        cargo build --release --verbose

    - name: Determine binary name (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        bin="target/release/mangpt.exe"
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Determine binary name (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        bin="target/release/mangpt"
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macOS or Linux)
      if: matrix.os != 'windows-latest'
      run: |
        strip "$BIN"

    - name: Determine archive name
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        echo "ARCHIVE=mangpt_$version_${{ matrix.build }}" >> $GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        mkdir -p "$ARCHIVE"/
        cp "$BIN" "$ARCHIVE"/
        cp {README.md,LICENSE} "$ARCHIVE"/

    - name: Build archive (Windows)
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
        7z a "$ARCHIVE.zip" "$ARCHIVE"
        certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
        echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

    - name: Bundle release (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cp target/release/mangpt.exe mangpt.exe
        7z a mangpt_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip "mangpt.exe"
        7z a mangpt_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip "README.md"
        7z a mangpt_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip "LICENSE"
        echo "ASSET=mangpt_${{ env.RELEASE_VERSION }}_${{ matrix.build }}.zip" >> $GITHUB_ENV

    - name: Build archive (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      run: |
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
